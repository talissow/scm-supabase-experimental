// üîç Script de Diagn√≥stico para Problema de Admin
// Execute no console do navegador para debugar

async function debugAdminAccess() {
    console.log('üîç Iniciando diagn√≥stico de acesso admin...');
    
    try {
        // 1. Verificar se Supabase est√° inicializado
        if (typeof supabaseClient === 'undefined') {
            console.error('‚ùå Supabase client n√£o inicializado');
            return;
        }
        
        // 2. Verificar sess√£o atual
        const { data: { session }, error: sessionError } = await supabaseClient.auth.getSession();
        
        if (sessionError) {
            console.error('‚ùå Erro ao verificar sess√£o:', sessionError);
            return;
        }
        
        if (!session) {
            console.error('‚ùå Nenhuma sess√£o ativa');
            return;
        }
        
        console.log('‚úÖ Sess√£o ativa:', {
            userId: session.user.id,
            email: session.user.email,
            name: session.user.user_metadata?.full_name || 'N/A'
        });
        
        // 3. Verificar se usu√°rio existe na tabela users
        const { data: userData, error: userError } = await supabaseClient
            .from('users')
            .select('*')
            .eq('id', session.user.id)
            .single();
        
        if (userError) {
            console.error('‚ùå Erro ao buscar usu√°rio na tabela users:', userError);
            
            // Tentar buscar por email
            const { data: userByEmail, error: emailError } = await supabaseClient
                .from('users')
                .select('*')
                .eq('email', session.user.email)
                .single();
            
            if (emailError) {
                console.error('‚ùå Usu√°rio n√£o encontrado na tabela users por ID nem por email');
                console.log('üí° Solu√ß√£o: Criar registro na tabela users');
                return;
            } else {
                console.log('‚úÖ Usu√°rio encontrado por email:', userByEmail);
                console.log('‚ö†Ô∏è ID do auth.users diferente do ID na tabela users');
                console.log('üí° Solu√ß√£o: Atualizar ID na tabela users');
                return;
            }
        }
        
        console.log('‚úÖ Usu√°rio encontrado na tabela users:', userData);
        
        // 4. Verificar role
        if (userData.role === 'admin') {
            console.log('‚úÖ Usu√°rio √© ADMIN - bot√£o deveria aparecer');
        } else {
            console.log('‚ùå Usu√°rio N√ÉO √© admin, role atual:', userData.role);
            console.log('üí° Solu√ß√£o: Atualizar role para admin');
        }
        
        // 5. Verificar status
        if (!userData.is_active) {
            console.log('‚ö†Ô∏è Usu√°rio est√° INATIVO');
            console.log('üí° Solu√ß√£o: Ativar usu√°rio');
        }
        
        // 6. Testar fun√ß√£o isUserAdmin
        if (typeof auth !== 'undefined' && typeof auth.isUserAdmin === 'function') {
            const isAdmin = await auth.isUserAdmin();
            console.log('üß™ Teste isUserAdmin():', isAdmin);
        }
        
    } catch (error) {
        console.error('‚ùå Erro inesperado no diagn√≥stico:', error);
    }
}

// Fun√ß√£o para corrigir o usu√°rio (executar apenas se necess√°rio)
async function fixAdminUser() {
    console.log('üîß Iniciando corre√ß√£o do usu√°rio admin...');
    
    try {
        const { data: { session } } = await supabaseClient.auth.getSession();
        
        if (!session) {
            console.error('‚ùå Nenhuma sess√£o ativa');
            return;
        }
        
        // Verificar se j√° existe na tabela users
        const { data: existingUser } = await supabaseClient
            .from('users')
            .select('*')
            .eq('email', session.user.email)
            .single();
        
        if (existingUser) {
            // Atualizar usu√°rio existente
            const { error: updateError } = await supabaseClient
                .from('users')
                .update({
                    id: session.user.id,
                    full_name: session.user.user_metadata?.full_name || 'Talisson Sousa de Santana',
                    role: 'admin',
                    is_active: true
                })
                .eq('email', session.user.email);
            
            if (updateError) {
                console.error('‚ùå Erro ao atualizar usu√°rio:', updateError);
                return;
            }
            
            console.log('‚úÖ Usu√°rio atualizado com sucesso!');
        } else {
            // Criar novo usu√°rio
            const { error: insertError } = await supabaseClient
                .from('users')
                .insert({
                    id: session.user.id,
                    email: session.user.email,
                    full_name: session.user.user_metadata?.full_name || 'Talisson Sousa de Santana',
                    role: 'admin',
                    is_active: true
                });
            
            if (insertError) {
                console.error('‚ùå Erro ao criar usu√°rio:', insertError);
                return;
            }
            
            console.log('‚úÖ Usu√°rio criado com sucesso!');
        }
        
        // Recarregar p√°gina para aplicar mudan√ßas
        console.log('üîÑ Recarregando p√°gina...');
        setTimeout(() => {
            window.location.reload();
        }, 2000);
        
    } catch (error) {
        console.error('‚ùå Erro inesperado na corre√ß√£o:', error);
    }
}

// Executar diagn√≥stico automaticamente
console.log('üöÄ Script de diagn√≥stico carregado!');
console.log('Para executar o diagn√≥stico, digite: debugAdminAccess()');
console.log('Para corrigir o usu√°rio, digite: fixAdminUser()');

// Exportar fun√ß√µes globalmente
window.debugAdminAccess = debugAdminAccess;
window.fixAdminUser = fixAdminUser;
