// üîê Auth Guard - Prote√ß√£o de Rotas
// Este arquivo deve ser inclu√≠do em todas as p√°ginas que precisam de autentica√ß√£o

// P√°ginas que N√ÉO precisam de autentica√ß√£o (p√∫blicas)
const PUBLIC_PAGES = [
    'login.html',
    'index.html',
    'CRIAR_ADMIN.html',
    'admin-interno.html',
    'TESTE_CONEXAO.html',
    'TESTE_CONFIG_SUPABASE.html',
    'TESTE_SIMPLES.html',
    'TESTE_PAGINAS.html',
    'TESTE_DIRETO.html',
    'TESTE_AUTENTICACAO.html',
    'TESTE_TABELAS.html',
    'TESTE_EXCLUSAO.html',
    'TESTE_IMPORTACAO.html',
    'TESTE_FUNCIONALIDADES.html'
];

// P√°ginas que precisam de autentica√ß√£o (protegidas)
const PROTECTED_PAGES = [
    'SCM_Supabase.html',
    'usuarios.html'
];

// Verificar se a p√°gina atual precisa de autentica√ß√£o
function isProtectedPage() {
    const currentPage = window.location.pathname.split('/').pop();
    return PROTECTED_PAGES.includes(currentPage);
}

// Verificar se a p√°gina atual √© p√∫blica
function isPublicPage() {
    const currentPage = window.location.pathname.split('/').pop();
    return PUBLIC_PAGES.includes(currentPage);
}

// Verificar se o usu√°rio est√° autenticado
async function isAuthenticated() {
    try {
        // Verificar se Supabase est√° inicializado
        if (typeof supabaseClient === 'undefined' || !supabaseClient) {
            console.log('üî¥ Supabase n√£o inicializado');
            return false;
        }

        // Verificar sess√£o ativa
        const { data: { session }, error } = await supabaseClient.auth.getSession();
        
        if (error) {
            console.log('üî¥ Erro ao verificar sess√£o:', error);
            return false;
        }

        if (!session) {
            console.log('üî¥ Nenhuma sess√£o ativa');
            return false;
        }

        console.log('üü¢ Usu√°rio autenticado:', session.user.email);
        return true;
    } catch (error) {
        console.log('üî¥ Erro na verifica√ß√£o de autentica√ß√£o:', error);
        return false;
    }
}

// Redirecionar para login
function redirectToLogin() {
    console.log('üîÑ Redirecionando para login...');
    window.location.href = '/login.html';
}

// Proteger p√°gina
async function protectPage() {
    // Se for p√°gina p√∫blica, n√£o fazer nada
    if (isPublicPage()) {
        console.log('üü¢ P√°gina p√∫blica - acesso liberado');
        return;
    }

    // Se for p√°gina protegida, verificar autentica√ß√£o
    if (isProtectedPage()) {
        console.log('üîê P√°gina protegida - verificando autentica√ß√£o...');
        
        const authenticated = await isAuthenticated();
        
        if (!authenticated) {
            console.log('‚ùå Usu√°rio n√£o autenticado - redirecionando para login');
            redirectToLogin();
            return;
        }
        
        console.log('‚úÖ Usu√°rio autenticado - acesso liberado');
    }
}

// Inicializar prote√ß√£o quando a p√°gina carregar
document.addEventListener('DOMContentLoaded', async () => {
    console.log('üõ°Ô∏è Auth Guard inicializado');
    
    // Aguardar um pouco para garantir que outros scripts carregaram
    setTimeout(async () => {
        await protectPage();
    }, 100);
});

// Exportar fun√ß√µes para uso em outros scripts
window.AuthGuard = {
    isAuthenticated,
    protectPage,
    redirectToLogin,
    isProtectedPage,
    isPublicPage
};
